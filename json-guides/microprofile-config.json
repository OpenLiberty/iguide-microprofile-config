{
    "name": "MicroprofileConfig",
    "title": "Microprofile Config",
    "description": "Creating a unified config for your sources",
    "duration": "10 minutes",
    "audience": "developer",
    "repo": "https://github.com/OpenLiberty/iguide-microprofile-config",
    "steps": [
        {
            "name": "Intro",
            "title": "What you'll learn",
            "guide_duration" : "25 minutes",
            "description": [
              "temp"
            ],
            "sections" : [
                {
                  "name": "backgroundConcepts",
                  "title": "Background concepts",
                  "description": [
                    "temp"
                  ]
                }
            ]
        },
        {
            "name": "ExampleScenario",
            "title": "Example: xxx",
            "description": [
                "temp"
            ]
        },
        {
            "name": "EnableMPConfig",
            "title": "Enabling the MicroProfile Config feature",
            "description": [
                "Begin by enabling the MicroProfile Config 1.1 feature in your <code>server.xml</code> file. This feature allows you to use the MicroProfile Config API to externalize configuration data."
            ],
            "instruction": [
              "Add the following element declaration inside the featureManager element of the <code>server.xml</code> file, or click <action tabindex='0' role='button' title='Enable MicroProfile Config' aria-label='Enable MicroProfile Config' onkeypress=\"microprofileConfigCallBack.addMicroProfileConfigFeatureButton(event)\" onclick=\"microprofileConfigCallBack.addMicroProfileConfigFeatureButton(event)\"><b>&lt;feature&gtmpConfig-1.1&lt;/feature&gt;</b></action>. Then, click <action tabindex='0' role='button' title='Save' aria-label='Save' onkeypress=\"microprofileConfigCallBack.saveButton(event)\" onclick=\"microprofileConfigCallBack.saveButton(event)\"><b>Save</b></action> on the editor menu pane."            ],
            "content":[
              {
                "displayType":"fileEditor",
                "fileName": "server.xml",
                "preload": [
                  "<?xml version=\"1.0\"?>",
                  "<server description=\"Sample Liberty server\">",
                  "   <featureManager>",
                  "      <feature>cdi-1.2</feature>",
                  "      <feature>jaxrs-2.0</feature>",
                  "",
                  "   </featureManager>",
                  "   <httpEndpoint host=\"*\" id=\"defaultHttpEndpoint\" httpsPort=\"${default.https.port}\"",
                  "   httpPort=\"{default.http.port}\"/>",
                  "</server>"
                ],
                "readonly": [
                  {
                      "from": "1",
                      "to": "5"
                  },
                  {
                      "from": "7",
                      "to": "10"
                  }
                ],
                "save": true,
                "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForFeatureInServerXML(editor); })"
              }
            ]
        },
        {
            "name": "ConfigureViaInject",
            "title": "Injecting configuration properties through annotations",
            "description": [
                "After you modify your <code>server.xml</code> file to <a>include the mpConfig feature</a>, a single configuration property value can be injected directly into your code using the <code>@Inject</code> and the <code>@ConfigProperty</code> annotations. The injected value is set when the application starts and is static.<br>",
                "Injecting a configuration value this way is recommended for mandatory properties. If no configured value exists for this property, a <code>DeploymentException</code> will be thrown during startup."
            ],
            "instruction": [
                "To inject a <code>download_url</code> configuration property into the code, add the following <code>@Inject</code> and <code>@ConfigProperty</code> annotations to line 11 before declaring the <code>private String downloadUrl</code>, or click  <action title='Inject a ConfigProperty' onclick='microprofileConfigCallBack.addInjectConfigButton(event)'><b>@Inject @ConfigProperty(name=\"download_url\")</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveButton(event)\"><b>Run</b></action> on the editor menu pane.<br><br><note>Note: You have not yet specified a value for the <code>download_url</code> configuration property.  Execution of this code at this time would cause a <code>DeploymentException</code> to be thrown since a value is required.</note>",
                "Type the following URL into the browser that follows, or click <action title='URL' onclick=\"microprofileConfigCallBack.populateURL(event, 'ConfigureViaInject')\"><b>https://music.com/play</b></action> and then press <action title='Enter' onclick=\"microprofileConfigCallBack.enterButtonURL(event, 'ConfigureViaInject')\"><b>Enter</b></action>."
            ],
            "content":[
                {
                    "displayType":"fileEditor",
                    "fileName": "Music-download.java",
                    "preload": [
                        "package com.music.download;",
                        "import javax.inject.Inject;",
                        "import org.eclipse.microprofile.config.Config;",
                        "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                        "",
                        "public class Music-download {",
                        "",
                        "    @Inject",
                        "    private Config config;",
                        "",
                        "",
                        "    private String downloadUrl;",
                        "",
                        "    public void download() {",
                        "        downloadService(downloadUrl);",
                        "    }",
                        "}"
                    ],
                    "readonly": [
                       {
                            "from": "1",
                            "to": "10"
                       },
                       {
                            "from": "12",
                            "to": "17"
                       }
                    ],
                    "save": false,
                    "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForInjectConfig(editor); })"
                },
                {
                    "displayType":"webBrowser",
                    "url": "",
                    "browserContent": "",
                    "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForInjectConfig(webBrowser); })"
                }
            ]
        },
        {
            "name": "InjectWithDefaultValue",
            "title": "Providing default values with injection",
            "TOCIndent": 1,
            "description": [
                "You can specify a default value for a configuration property using the <b>defaultValue</b> parameter in the <code>@ConfigProperty</code> annotation.  If the property is not assigned a value anywhere else, then it will be assigned this default value.<br>"
            ],
            "instruction": [
                "Change the @ConfigProperty annotation on line 11 to the following code, or click <action title='Provide default value using ConfigProperty annotation' onclick=\"microprofileConfigCallBack.addInjectDefaultConfigButton(event)\"><b>@Inject @ConfigProperty(name=\"download_url\", defaultValue=\"ftp://music.com/us-east/download\")</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveButton(event)\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event)\"><b>Refresh</b></action> in the following browser to see that the download_url via the injection is used.<br/>"
            ],
            "content":[
                {
                    "displayType":"fileEditor",
                    "fileName": "Music-download.java",
                    "preload": [
                        "package com.music.download;",
                        "import javax.inject.Inject;",
                        "import org.eclipse.microprofile.config.Config;",
                        "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                        "",
                        "public class Music-download {",
                        "",
                        "    @Inject",
                        "    private Config config;",
                        "",
                        "    @Inject @ConfigProperty(name=\"download_url\")",
                        "    private String downloadUrl;",
                        "",
                        "    public void download() {",
                        "        downloadService(downloadUrl);",
                        "    }",
                        "}"
                    ],
                    "readonly": [
                       {
                            "from": "1",
                            "to": "10"
                       },
                       {
                            "from": "12",
                            "to": "17"
                       }
                    ],
                    "save": false,
                    "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForInjectDefaultConfig(editor); })"
                },
                {
                    "displayType":"webBrowser",
                    "url": "https://music.com/play",
                    "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-deployment-exception.html",
                    "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForInjectDefaultConfig(webBrowser); })"
                }
            ]
        },
        {
            "name": "ConfigureDefaultConfigSources",
            "title": "Using default ConfigSources to provide configuration data",
            "description": [
                "A <b>ConfigSource</b> is a source for configured values.  Each ConfigSource has a specified <b>ordinal</b>, which is used to determine the importance of the values taken from the associated ConfigSource. A higher ordinal means that the values taken from this ConfigSource will override values from lower-priority ConfigSources. <br><br>MicroProfile Config has 3 default ConfigSources:",
                "<ul><li>All <code>META-INF/microprofile-config.properties</code> found on the classpath. (default ordinal = 100).</li><li>Environment variables (default ordinal=300).</li><li>System properties (default ordinal=400).</li></ul>Setting values within any of these ConfigSources will override any default value for the configuration property set in the injection."
            ],
            "instruction": [
            ],
            "content":[
            ]
        },
        {
            "name": "ConfigurePropsFile",
            "title": "Configuring with the properties file",
            "TOCIndent": 1,
            "description": [
                "You can provide the <code>/META-INF/microprofile-config.properties</code> file as part of your packaged application. The <code>/META-INF/microprofile-config.properties</code> file may be created in multiple locations, but you must specify these file locations in your classpath.",
                "",
                "The properties file contains settings with a default ordinal of 100 which overrides the injected default values with the same key, so the <code>download_url</code> property value in the <code>microprofile-config.properties</code> will be used."
            ],
            "instruction": [
                "In <code>/META-INF/microprofile-config.properties</code> add the following on line 1 or click <action title='Configure download_url in microprofile-config.properties' onclick=\"microprofileConfigCallBack.addPropToConfigProps(event)\"><b>download_url=ftp://music.com/us-south/download</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event)\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event)\"><b>Refresh</b></action> in the following browser to see that the download_url in the microprofile-config.properties file is used.<br/>"
            ],
            "content":[
                {
                    "displayType":
                     "tabbedEditor",
                    "activeTab": "META-INF/microprofile-config.properties",
                    "callback": "(function test(tabbedEditor) {microprofileConfigCallBack.listenToEditorTabChange(tabbedEditor, 0, 'META-INF/microprofile-config.properties'); })",
                    "editorList": [
                      {
                        "displayType":"fileEditor",
                        "fileName": "Music-download.java",
                        "preload": [
                              "package com.music.download;",
                              "import javax.inject.Inject;",
                              "import org.eclipse.microprofile.config.Config;",
                              "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                              "",
                              "public class Music-download {",
                              "",
                              "    @Inject",
                              "    @Config config",
                              "",
                              "    @Inject",
                              "    @ConfigProperty(name=\"download_url\", ",
                              "                   defaultValue=\"ftp://music.com/us-east/download\")",
                              "    private String downloadUrl;",
                              "",
                              "    public void download() {",
                              "        downloadService(downloadUrl);",
                              "    }",
                              "}"
                        ],
                        "readonly": true,
                        "save": false
                      },
                      {
                        "displayType":"fileEditor",
                        "fileName": "META-INF/microprofile-config.properties",
                        "readonly": false,
                        "save": false,
                        "preload": [
                            ""
                        ],
                        "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForPropConfig(editor); })"
                      }
                    ]
              },
              {
                "displayType":"webBrowser",
                "url": "https://music.com/play",
                "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-from-injection.html",
                "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForPropFileConfig(webBrowser); })"
              }
            ]
        },
        {
            "name": "ConfigureAsEnvVar",
            "title": "Configuring as an environment variable",
            "TOCIndent": 1,
            "description": [
                "In WebSphere Liberty, you can use server.env files at the installation and server levels to specify environment variables. The runtime level file is located at <code>${wlp.install.dir}/etc/server.env</code> and the server level is located at <code>${server.config.dir}/server.env</code>. If both files exist, the contents of the two files are merged. If the same environment variable is in both files, the value in the server level file takes precedence over the value in the runtime level file. We are going to use the <code>${server.config.dir}/server.env</code> to configure the download_url environment variable.",
                "",
                "The server.env file contains the environment settings with a default ordinal of 300 which is higher than the 100 for the microprofile-config.properties, therefore the <code>download_url</code> property value in server.env will be used."
            ],
            "instruction": [
              "In <code>server.env</code>, add the following after <code>WLP_SKIP_MAXPERMSIZE=true</code> on line 2 or click <action title='Configure download_url in server.env' onclick=\"microprofileConfigCallBack.addPropToServerEnvButton(event)\"><b>download_url=ftp://music.com/us-west/download</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event)\"><b>Run</b></action> on the editor menu pane.",
              "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event)\"><b>Refresh</b></action> in the following browser to see the download_url in the server.env file is used.<br/>"
            ],
            "content":[
              {
                "displayType": "tabbedEditor",
                "activeTab": "server.env",
                "callback": "(function test(tabbedEditor) {microprofileConfigCallBack.listenToEditorTabChange(tabbedEditor, 0, 'server.env'); })",
                "editorList": [
                  {
                    "displayType":"fileEditor",
                    "fileName": "Music-download.java",
                    "preload": [
                          "package com.music.download;",
                          "import javax.inject.Inject;",
                          "import org.eclipse.microprofile.config.Config;",
                          "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                          "",
                          "public class Music-download {",
                          "",
                          "    @Inject",
                          "    @Config config",
                          "",
                          "    @Inject",
                          "    @ConfigProperty(name=\"download_url\", ",
                          "                   defaultValue=\"ftp://music.com/us-east/download\")",
                          "    private String downloadUrl;",
                          "",
                          "    public void download() {",
                          "        downloadService(downloadUrl);",
                          "    }",
                          "}"
                    ],
                    "readonly": true,
                    "save": false
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "META-INF/microprofile-config.properties",
                    "preload": [
                        "download_url=ftp://music.com/us-south/download"
                    ],
                    "readonly": true,
                    "save": false
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "server.env",
                    "preload": [
                      "WLP_SKIP_MAXPERMSIZE=true",
                      ""
                    ],
                    "readonly": [
                      {
                        "from": "1",
                        "to": "1"
                      }
                    ],
                    "save": false,
                    "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForServerEnv(editor); })"
                  }
                ]
              },
              {
                "displayType":"webBrowser",
                "url": "https://music.com/play",
                "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-from-properties-file.html",
                "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForServerEnvConfig(webBrowser); })"
              }
            ]
        },
        {
            "name": "ConfigureAsSysProp",
            "title": "Configuring as a system property",
            "TOCIndent": 1,
            "description": [
                "Default configuration variables can be retrieved from the Java system properties and these variables have a default ordinal of 400. Liberty adds properties from the server’s <code>bootstrap.properties</code> and <code>jvm.options</code> files to the Java system properties. The bootstrap.properties file does not exist by default until you create it. You can create and configure the jvm.options file in multiple locations within your Liberty installation directory.",
                "",
                "The different locations where Liberty checks for jvm.options are the following: <ul><li><code>${wlp.install.dir}/usr/shared/jvm.options</code></li><li><code>${server.config.dir}/configDropins/defaults/jvm.options</code></li> <li><code>${server.config.dir}/jvm.options</code></li> <li><code>${server.config.dir}/configDropins/overrides/jvm.options</code></li></ul>",
                "The contents of the files are merged in order from top to bottom before server start and are used as the JVM options for the server. Only if none of these files are present, then the values from <code>${wlp.install.dir}/etc/jvm.options</code> are used.",
                "",
                "<note>Note: If a property exists in both <code>bootstrap.properties</code> and <code>jvm.options</code>, then the value from <code>jvm.options</code> takes precedence.</note>",
                "In this example, we are going to use the <code>${server.config.dir}/bootstrap.properties</code> file to configure the download_url system property."
            ],
            "instruction": [
                "Add the following <code>download_url=ftp://music.com/asia/download</code> on line 2 of <code>bootstrap.properties</code>, after the WLP_SKIP_MAXPERMSIZE=true or click <action title='Configure download_url in System Properties' onclick=\"microprofileConfigCallBack.addPropToSystemProperties(event)\"><b>download_url=ftp://music.com/asia/download</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event)\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event)\"><b>Refresh</b></action> in the following browser to see the download_url in the bootstrap.properties file is used.<br/>"
            ],
            "content":[
                {
                  "displayType": "tabbedEditor",
                  "activeTab": "bootstrap.properties",
                  "callback": "(function test(tabbedEditor) {microprofileConfigCallBack.listenToEditorTabChange(tabbedEditor, 0, 'bootstrap.properties'); })",
                  "editorList": [
                    {
                      "displayType":"fileEditor",
                      "fileName": "Music-download.java",
                      "preload": [
                            "package com.music.download;",
                            "import javax.inject.Inject;",
                            "import org.eclipse.microprofile.config.Config;",
                            "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                            "",
                            "public class Music-download {",
                            "",
                            "    @Inject",
                            "    @Config config",
                            "",
                            "    @Inject",
                            "    @ConfigProperty(name=\"download_url\", ",
                            "                   defaultValue=\"ftp://music.com/us-east/download\")",
                            "    private String downloadUrl;",
                            "",
                            "    public void download() {",
                            "        downloadService(downloadUrl);",
                            "    }",
                            "}"
                      ],
                      "readonly": true,
                      "save": false
                    },
                    {
                      "displayType":"fileEditor",
                      "fileName": "META-INF/microprofile-config.properties",
                      "preload": [
                          "download_url=ftp://music.com/us-south/download"
                      ],
                      "readonly": true,
                      "save": false
                    },
                    {
                      "displayType":"fileEditor",
                      "fileName": "server.env",
                      "preload": [
                        "WLP_SKIP_MAXPERMSIZE=true",
                        "download_url=ftp://music.com/us-west/download"
                      ],
                      "readonly": true,
                      "save": false
                    },
                    {
                        "displayType":"fileEditor",
                        "fileName": "bootstrap.properties",
                        "preload": [
                              "WLP_SKIP_MAXPERMSIZE=true"
                        ],
                        "readonly": [
                            {
                                "from": "1",
                                "to": "5"
                            }
                        ],
                        "save": false,
                        "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForSystemProperties(editor); })"
                    }
                  ]
                },
                {
                  "displayType":"webBrowser",
                  "url": "https://music.com/play",
                  "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-from-property-in-server-env.html",
                  "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForSystemPropConfig(webBrowser); })"
                }
            ]
        },
        {
            "name": "UpdateOrdinal",
            "title": "Changing the ordinal of a ConfigSource",
            "TOCIndent": 1,
            "description": [
                "You can override the default ordinal value of a ConfigSource by adding the <code>config_ordinal</code> property to your configuration source file. The configuration source with the highest ordinal value takes precedence."
            ],
            "instruction": [
                "On line 2 of the <code>/META-INF/microprofile-config.properties</code> file add or click <action title='Changing the ordinal of microprofile-config.properties' onclick=\"microprofileConfigCallBack.addConfigOrdinalToProps(event)\"><b>config_ordinal=500</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event)\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event)\"><b>Refresh</b></action> in the following browser to see that the <code>download_url</code> in the <code>/META-INF/microprofile-config.properties</code> file is used instead of the one defined in the <code>bootstrap.properties</code> file.<br/>"
            ],
            "content":[
              {
                "displayType": "tabbedEditor",
                "activeTab": "META-INF/microprofile-config.properties",
                "callback": "(function test(tabbedEditor) {microprofileConfigCallBack.listenToEditorTabChange(tabbedEditor, 0, 'META-INF/microprofile-config.properties'); })",
                "editorList": [
                  {
                    "displayType":"fileEditor",
                    "fileName": "Music-download.java",
                    "preload": [
                          "package com.music.download;",
                          "import javax.inject.Inject;",
                          "import org.eclipse.microprofile.config.Config;",
                          "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                          "",
                          "public class Music-download {",
                          "",
                          "    @Inject",
                          "    @Config config",
                          "",
                          "    @Inject",
                          "    @ConfigProperty(name=\"download_url\", ",
                          "                   defaultValue=\"ftp://music.com/us-east/download\")",
                          "    private String downloadUrl;",
                          "",
                          "    public void download() {",
                          "        downloadService(downloadUrl);",
                          "    }",
                          "}"
                    ],
                    "readonly": true,
                    "save": false
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "META-INF/microprofile-config.properties",
                    "readonly": false,
                    "save": false,
                    "preload": [
                        "download_url=ftp://music.com/us-south/download"
                    ],
                    "readonly": [
                      {
                        "from": "1",
                        "to": "1"
                      }
                    ],
                    "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForOrdinalChange(editor); })"
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "server.env",
                    "preload": [
                      "WLP_SKIP_MAXPERMSIZE=true",
                      ""
                    ],
                    "readonly": true,
                    "save": false
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "bootstrap.properties",
                    "preload": [
                          "WLP_SKIP_MAXPERMSIZE=true"
                     ],
                    "readonly": true,
                    "save": false                 }
                ]
              },
              {
                "displayType":"webBrowser",
                "url": "https://music.com/play",
                "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-from-property-in-system-props.html",
                "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForPropFileConfig(webBrowser); })"
              }
            ]
        },
        {
            "name": "DefaultPlayground",
            "title": "Default ConfigSources playground",
            "TOCIndent": 1,
            "description": [
                "temp"
            ],
            "content": [
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType": "fileEditor",
                            "fileName": "Injection",
                            "preload": [
                                "package com.music.download;",
                                "import javax.inject.Inject;",
                                "import org.eclipse.microprofile.config.Config;",
                                "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                                "",
                                "public class MusicDownload {",
                                "",
                                "    @Inject",
                                "    private Config config;",
                                "",
                                "    @Inject @ConfigProperty(name=\"download_url\", defaultValue=\"ftp://music.com/us-east/download\");",
                                "    private String downloadUrl;",
                                "",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "5"
                                }
                            ],
                            "callback": "(function test(editor) {playground.repopulatePlaygroundConfigs();})"
                        },
                        {
                            "displayType": "fileEditor",
                            "fileName": "Properties",
                            "preload": [
                                "download_url=ftp://music.com/us-south/download"
                            ],
                            "callback": "(function test(editor) {playground.repopulatePlaygroundConfigs();})"
                        },
                        {
                            "displayType": "fileEditor",
                            "fileName": "Environment Property",
                            "preload": [

                            ],
                            "callback": "(function test(editor) {playground.repopulatePlaygroundConfigs();})"
                        },
                        {
                            "displayType": "fileEditor",
                            "fileName": "System Property",
                            "preload": [
                                "WLP_SKIP_MAXPERMSIZE=true",
                                "download_url=ftp://music.com/asia/download"
                            ],
                            "callback": "(function test(editor) {playground.repopulatePlaygroundConfigs();})"
                        }
                    ]
                }
            ]
        },
        {
            "name": "WhatNext",
            "title": "Great work!  You're done!",
            "description": ["You learned how ......",
                            "<p> <a >Download the sample MicroProfile Config application on github</a>.</p>"
                           ]
        }

    ]
}
