{
    "name": "MicroprofileConfig",
    "title": "Microprofile Config",
    "description": "Use MicroProfile Config to separate configuration from code",
    "duration": "25 minutes",
    "audience": "developer",
    "repo": "https://github.com/OpenLiberty/iguide-microprofile-config",
    "steps": [
        {
            "name": "Intro",
            "title": "What you'll learn",
            "guide_duration" : "25 minutes",
            "description": [
              "Explore how to inject configuration data into a microservice without repackaging the application each time the underlying runtime environment changes.  <a href='https://microprofile.io/' target='_blank'>MicroProfile</a> makes building configurable microservices easy with its <a href='https://github.com/eclipse/microprofile-config' target='_blank'>MicroProfile Config</a> feature. Application configuration properties from multiple sources are combined into a single set of configuration properties and accessed from a single API by your application.<br>",
              "Using the Microprofile Config API, the sample application illustrates how a configuration property can be assigned a value in multiple configuration sources. Each source is assigned a priority.  The value from the source with the highest priority takes precedence over that from a lower priority.  This method allows code to run unchanged under different configurations for development, test, quality assurance, and production environments since an existing configuration value can easily be overridden as the need arises."
            ],
            "sections" : [
                {
                  "name": "backgroundConcepts",
                  "title": "Background concepts",
                  "description": [
                    "Microprofile Config uses <b><i>Context Dependency Injection</i></b> to inject configuration property values directly into an application without requiring user code to retrieve them.  The injected values, set at application startup, are <b><i>static</i></b>.<br>",
                    "The API combines configuration values from multiple sources, each known as a <b><i>ConfigSource</b></i>.  Each ConfigSource has a specified priority, defined by its <b><i>ordinal</i></b> value. A higher ordinal means that the values taken from this ConfigSource will override values from ConfigSources with a lower ordinal value. <br><br>MicroProfile Config has 3 default ConfigSources:",
                    "<ul><li>All <code>META-INF/microprofile-config.properties</code> found on the classpath (default ordinal = 100).</li><li>Environment variables (default ordinal = 300).</li><li>System properties (default ordinal = 400).</li></ul>"
                  ],
                  "content": [
                    {
                      "content": "<div class='ordinalPriorities'><img src='/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/images/ordinalPriorities.png' alt='Ordinal Priorities'></div>",
                      "displayType": "pod"
                    }              
                  ]
                }
            ]
        },
        {
            "name": "ExampleScenario",
            "title": "Example: DevOps pipeline",
            "description": [
                "Imagine that you're developing and deploying a DisplayCarTypes microservice for displaying the types of cars that are currently available for purchase from your business.   This microservice has a dependency on another microservice called ObtainCarTypes which provides the currently available list.  As you develop your DisplayCarTypes microservice, you need to ensure that it works correctly when it interacts with the ObtainCarTypes microservice.  For stability and security reasons we don't want to test against the production version of ObtainCarTypes during the development pipeline.  This leads to running four instances of the ObtainCarTypes microservice that are to be used at the different stages of the devOps pipeline:",
                "",
                "<ul><li>Development - Port: 9080</li><li>Test - Port: 9081</li><li>Quality Assurance - Port: 9082</li><li>Production - Port: 9083</li></ul>",
                "Each instance of the ObtainCarTypes microservice is running on one port of a single application on a single Liberty server. As you progress though this guide, you will set a configuration property for the port value to specify which of the four ObtainCarTypes instances the DisplayCarTypes microservice should connect to. "]
        },
        {
            "name": "EnableMPConfig",
            "title": "Enabling MicroProfile Config",
            "description": [
                "Begin by enabling the MicroProfile Config 1.1 feature in your <code>server.xml</code> file. This feature allows you to use the MicroProfile Config API to externalize configuration data."
            ],
            "instruction": [
              "Add the following element declaration inside the featureManager element of the <code>server.xml</code> file, or click <action tabindex='0' role='button' title='Enable MicroProfile Config' aria-label='Enable MicroProfile Config' onkeypress=\"microprofileConfigCallBack.addMicroProfileConfigFeatureButton(event)\" onclick=\"microprofileConfigCallBack.addMicroProfileConfigFeatureButton(event)\"><b>&lt;feature&gtmpConfig-1.1&lt;/feature&gt;</b></action>. Then, click <action tabindex='0' role='button' title='Save' aria-label='Save' onkeypress=\"microprofileConfigCallBack.saveButton(event)\" onclick=\"microprofileConfigCallBack.saveButton(event)\"><b>Save</b></action> on the editor menu pane."
            ],
            "content":[
              {
                "displayType":"fileEditor",
                "fileName": "server.xml",
                "preload": [
                  "<?xml version=\"1.0\"?>",
                  "<server description=\"Sample Liberty server\">",
                  "   <featureManager>",
                  "      <feature>cdi-1.2</feature>",
                  "      <feature>jaxrs-2.0</feature>",
                  "",
                  "   </featureManager>",
                  "   <httpEndpoint host=\"*\" id=\"defaultHttpEndpoint\" httpsPort=\"${default.https.port}\"",
                  "   httpPort=\"{default.http.port}\"/>",
                  "</server>"
                ],
                "readonly": [
                  {
                      "from": "1",
                      "to": "5"
                  },
                  {
                      "from": "7",
                      "to": "10"
                  }
                ],
                "save": true,
                "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForFeatureInServerXML(editor); })"
              }
            ]
        },
        {
            "name": "ConfigureViaInject",
            "title": "Injecting configuration through @ConfigProperty annotation",
            "description": [
                "After you modify your <code>server.xml</code> file to <a href='#enabling-microprofile-config'>include the mpConfig feature</a>, a single configuration property value can be injected directly into your code using the <code>@Inject</code> and the <code>@ConfigProperty</code> annotations. The injected value is static and therefore will not change after the application starts.<br>",
                "Injecting a configuration value this way is recommended for mandatory properties. If no configured value exists for this property, a <code>DeploymentException</code> is thrown during application startup causing the application to fail to start."
            ],
            "instruction": [
                "To inject a <code>port</code> configuration property into the code, add the following <code>@Inject</code> and <code>@ConfigProperty</code> annotations to line 6 before declaring the <code>private Integer port</code>, or click  <action title='Inject a ConfigProperty' onclick='microprofileConfigCallBack.addInjectConfigButton(event)'><b>@Inject @ConfigProperty(name=\"port\")</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveButton(event)\"><b>Run</b></action> on the editor menu pane to see the exception occur."
            ],
            "content":[
                {
                    "displayType":"fileEditor",
                    "fileName": "CarTypes.java",
                    "preload": [
                        "package com.car.types;",
                        "import javax.inject.Inject;",
                        "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                        "",
                        "public class CarTypes {",
                        "",
                        "    private Integer port;",
                        "",
                        "}"
                    ],
                    "readonly": [
                       {
                            "from": "1",
                            "to": "5"
                       },
                       {
                            "from": "7",
                            "to": "9"
                       }
                    ],
                    "save": false,
                    "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForInjectConfig(editor); })"
                },
                {
                    "displayType":"pod"
                }
            ]
        },
        {
            "name": "InjectWithDefaultValue",
            "title": "Providing default values with injection",
            "TOCIndent": 1,
            "description": [
                "You can specify a default value for a configuration property using the <b>defaultValue</b> parameter in the <code>@ConfigProperty</code> annotation.  This value is used when a value is not specified in any MicroProfile Config configuration source.<br>"
            ],
            "instruction": [
                "Change the <code>@ConfigProperty</code> annotation on line 6 to the following code, or click <action title='Provide default value using ConfigProperty annotation' onclick=\"microprofileConfigCallBack.addInjectDefaultConfigButton(event)\"><b>@Inject @ConfigProperty(name=\"port\",\n defaultValue=\"9080\")</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveButton(event)\"><b>Run</b></action> on the editor menu pane.",
                "Type the following URL into the browser that follows, or click <action title='URL' onclick=\"microprofileConfigCallBack.populateURL(event, 'InjectWithDefaultValue')\"><b>https://mycarvendor.com/car-types</b></action> and then press <action title='Enter' onclick=\"microprofileConfigCallBack.enterButtonURL(event, 'InjectWithDefaultValue')\"><b>Enter</b></action>. The development port of the obtainCarTypes microservice returns the values <code>carA</code> and <code>carB</code>."
            ],
            "content":[
                {
                    "displayType":"fileEditor",
                    "fileName": "CarTypes.java",
                    "preload": [
                        "package com.car.types;",
                        "import javax.inject.Inject;",
                        "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                        "",
                        "public class CarTypes {",
                        "    @Inject @ConfigProperty(name=\"port\")",
                        "    private Integer port;",
                        "",
                        "}"
                    ],
                    "readonly": [
                       {
                            "from": "1",
                            "to": "5"
                       },
                       {
                            "from": "7",
                            "to": "9"
                       }
                    ],
                    "save": false,
                    "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForInjectDefaultConfig(editor); })"
                },
                {
                    "displayType":"webBrowser",
                    "url": "",
                    "browserContent": "",
                    "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForInjectDefaultConfig(webBrowser); })"
                }
            ]
        },
        {
            "name": "ConfigurePropsFile",
            "title": "Configuring with the properties file",
            "description": [
                "You can provide the <code>/META-INF/microprofile-config.properties</code> file as part of your packaged application. The <code>/META-INF/microprofile-config.properties</code> file may be created in multiple locations, but you must specify these file locations in your classpath.",
                "",
                "The properties file contains settings with a default ordinal of 100 which overrides the injected default values with the same key, so the <code>port</code> property value in the <code>microprofile-config.properties</code> will be used."
            ],
            "instruction": [
                "In <code>/META-INF/microprofile-config.properties</code>, add the following on line 1 or click <action title='Configure port in microprofile-config.properties' onclick=\"microprofileConfigCallBack.addPropToConfigProps(event)\"><b>port=9081</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event)\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event)\"><b>Refresh</b></action> in the following browser to see that the port value in the <code>/META-INF/microprofile-config.properties</code> file is used. The test port of the obtainCarTypes microservice returns the values <code>typeA</code>, <code>typeB</code>, and <code>typeC</code>. <br/>"
            ],
            "content":[
                {
                    "displayType": "tabbedEditor",
                    "activeTab": "META-INF/microprofile-config.properties",
                    "callback": "(function test(tabbedEditor) {microprofileConfigCallBack.listenToEditorTabChange(tabbedEditor, 0, 'META-INF/microprofile-config.properties'); })",
                    "editorList": [
                      {
                        "displayType":"fileEditor",
                        "fileName": "CarTypes.java",
                        "preload": [
                              "package com.car.types;",
                              "import javax.inject.Inject;",
                              "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                              "",
                              "public class CarTypes {",
                              "    @Inject",
                              "    @ConfigProperty(name=\"port\", ",
                              "                   defaultValue=\"9080\")",
                              "    private Integer port;",
                              "",
                              "}"
                        ],
                        "readonly": true,
                        "save": false
                      },
                      {
                        "displayType":"fileEditor",
                        "fileName": "META-INF/microprofile-config.properties",
                        "readonly": false,
                        "save": false,
                        "preload": [
                            ""
                        ],
                        "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForPropConfig(editor); })"
                      }
                    ]
              },
              {
                "displayType":"webBrowser",
                "url": "https://mycarvendor.com/car-types",
                "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-from-injection.html",
                "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForPropFileConfig(webBrowser); })"
              }
            ]
        },
        {
            "name": "ConfigureAsEnvVar",
            "title": "Configuring with an environment variable",
            "description": [
                "In Open Liberty, you can use <code>server.env</code> files at the installation and server levels to specify environment variables. The installation level file is located at <code>${wlp.install.dir}/etc/server.env</code> and the server level is located at <code>${server.config.dir}/server.env</code>. If both files exist, the contents of the two files are merged. If the same environment variable is in both files, the value in the server level file takes precedence over the value in the installation level file. We are going to use the <code>${server.config.dir}/server.env</code> to configure the <code>port</code> environment variable.",
                "",
                "The <code>server.env</code> file contains the environment settings with a default ordinal of 300 which is higher than the 100 for the <code>/META-INF/microprofile-config.properties</code>, therefore the <code>port</code> property value in <code>server.env</code> will be used."
            ],
            "instruction": [
              "In <code>server.env</code>, add the following on line 1 or click <action title='Configure port in server.env' onclick=\"microprofileConfigCallBack.addPropToServerEnvButton(event)\"><b>port=9082</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event)\"><b>Run</b></action> on the editor menu pane.",
              "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event)\"><b>Refresh</b></action> in the following browser to see the port value in the server.env file is used. The quality assurance port of the obtainCarTypes microservice returns the values <code>SUV</code>, <code>Crossover</code>, and <code>Coupe</code>.<br/>"
            ],
            "content":[
              {
                "displayType": "tabbedEditor",
                "activeTab": "server.env",
                "callback": "(function test(tabbedEditor) {microprofileConfigCallBack.listenToEditorTabChange(tabbedEditor, 0, 'server.env'); })",
                "editorList": [
                  {
                    "displayType":"fileEditor",
                    "fileName": "CarTypes.java",
                    "preload": [
                          "package com.car.types;",
                          "import javax.inject.Inject;",
                          "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                          "",
                          "public class CarTypes {",
                          "    @Inject",
                          "    @ConfigProperty(name=\"port\", ",
                          "                    defaultValue=\"9080\")",
                          "    private Integer port;",
                          "",
                          "}"
                    ],
                    "readonly": true,
                    "save": false
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "META-INF/microprofile-config.properties",
                    "preload": [
                        "port=9081"
                    ],
                    "readonly": true,
                    "save": false
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "server.env",
                    "preload": [
                      ""
                    ],
                    "readonly": [
                      {
                        "from": "1",
                        "to": "1"
                      }
                    ],
                    "save": false,
                    "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForServerEnv(editor); })"
                  }
                ]
              },
              {
                "displayType":"webBrowser",
                "url": "https://mycarvendor.com/car-types",
                "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-from-properties-file.html",
                "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForServerEnvConfig(webBrowser); })"
              }
            ]
        },
        {
            "name": "ConfigureAsSysProp",
            "title": "Configuring with a system property",
            "description": [
                "Default configuration variables can be retrieved from the Java system properties and these variables have a default ordinal of 400. Open Liberty adds properties from the server’s <code>bootstrap.properties</code> and <code>jvm.options</code> files to the Java system properties. You can create and configure the <code>jvm.options</code> file in multiple locations within your Open Liberty installation directory.",
                "",
                "The different locations where Open Liberty checks for <code>jvm.options</code> are the following: <ol><li><code>${wlp.install.dir}/usr/shared/jvm.options</code></li><li><code>${server.config.dir}/configDropins/defaults/jvm.options</code></li> <li><code>${server.config.dir}/jvm.options</code></li> <li><code>${server.config.dir}/configDropins/overrides/jvm.options</code></li></ol>",
                "The contents of these files are merged, with latter files taking precedence in the case of duplicate properties. If none of these files are present, then <code>${wlp.install.dir}/etc/jvm.options</code> will be used. If a property exists in both <code>bootstrap.properties</code> and <code>jvm.options</code>, then the value from <code>jvm.options</code> takes precedence.",
                "",
                "In this example, we are going to use the <code>${server.config.dir}/bootstrap.properties</code> file to configure the <code>port</code> system property."
            ],
            "instruction": [
                "Add the following port value on line 1 of <code>bootstrap.properties</code>, or click <action title='Configure port in System Properties' onclick=\"microprofileConfigCallBack.addPropToSystemProperties(event)\"><b>port=9083</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event)\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event)\"><b>Refresh</b></action> in the following browser to see the port value in the <code>bootstrap.properties</code> file is used. The production port of the obtainCarTypes microservice returns values <code>SUV</code>, <code>Crossover</code>, <code>Coupe</code>, <code>Truck</code>, and <code>Convertible</code>.<br/>"
            ],
            "content":[
                {
                  "displayType": "tabbedEditor",
                  "activeTab": "bootstrap.properties",
                  "callback": "(function test(tabbedEditor) {microprofileConfigCallBack.listenToEditorTabChange(tabbedEditor, 0, 'bootstrap.properties'); })",
                  "editorList": [
                    {
                      "displayType":"fileEditor",
                      "fileName": "CarTypes.java",
                      "preload": [
                            "package com.car.types;",
                            "import javax.inject.Inject;",
                            "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                            "",
                            "public class CarTypes {",
                            "",
                            "    @Inject",
                            "    @ConfigProperty(name=\"port\", ",
                            "                   defaultValue=\"9080\")",
                            "    private Integer port;",
                            "",
                            "}"
                      ],
                      "readonly": true,
                      "save": false
                    },
                    {
                      "displayType":"fileEditor",
                      "fileName": "META-INF/microprofile-config.properties",
                      "preload": [
                          "port=9081"
                      ],
                      "readonly": true,
                      "save": false
                    },
                    {
                      "displayType":"fileEditor",
                      "fileName": "server.env",
                      "preload": [
                        "port=9082"
                      ],
                      "readonly": true,
                      "save": false
                    },
                    {
                        "displayType":"fileEditor",
                        "fileName": "bootstrap.properties",
                        "preload": [
                              ""
                        ],
                        "readonly": [
                            {
                                "from": "1",
                                "to": "5"
                            }
                        ],
                        "save": false,
                        "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForSystemProperties(editor); })"
                    }
                  ]
                },
                {
                  "displayType":"webBrowser",
                  "url": "https://mycarvendor.com/car-types",
                  "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-from-property-in-server-env.html",
                  "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForSystemPropConfig(webBrowser); })"
                }
            ]
        },
        {
            "name": "UpdateOrdinal",
            "title": "Changing the ordinal of a ConfigSource",
            "description": [
                "You can override the default ordinal value of a ConfigSource by adding the <code>config_ordinal</code> property to your configuration source file. The configuration source with the highest ordinal value takes precedence.",
                "",
                "Adding <code>config_ordinal</code> to <code>/META-INF/microprofile-config.properties</code> with a value of 500 increases its ordinal value. This will now override the port value from <code>bootstrap.properties</code> which has a default ordinal of 400."
            ],
            "instruction": [
                "On line 2 of the <code>/META-INF/microprofile-config.properties</code> file add or click <action title='Changing the ordinal of microprofile-config.properties' onclick=\"microprofileConfigCallBack.addConfigOrdinalToProps(event)\"><b>config_ordinal=500</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event)\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event)\"><b>Refresh</b></action> in the following browser to see that the <code>port</code> in the <code>/META-INF/microprofile-config.properties</code> file is used instead of the one defined in the <code>bootstrap.properties</code> file.<br/>"
            ],
            "content":[
              {
                "displayType": "tabbedEditor",
                "activeTab": "META-INF/microprofile-config.properties",
                "callback": "(function test(tabbedEditor) {microprofileConfigCallBack.listenToEditorTabChange(tabbedEditor, 0, 'META-INF/microprofile-config.properties'); })",
                "editorList": [
                  {
                    "displayType":"fileEditor",
                    "fileName": "CarTypes.java",
                    "preload": [
                          "package com.car.types;",
                          "import javax.inject.Inject;",
                          "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                          "",
                          "public class CarTypes {",
                          "",
                          "    @Inject",
                          "    @ConfigProperty(name=\"port\", ",
                          "                    defaultValue=\"9080\")",
                          "    private Integer port;",
                          "",
                          "}"
                    ],
                    "readonly": true,
                    "save": false
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "META-INF/microprofile-config.properties",
                    "readonly": false,
                    "save": false,
                    "preload": [
                        "port=9081"
                    ],
                    "readonly": [
                      {
                        "from": "1",
                        "to": "1"
                      }
                    ],
                    "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForOrdinalChange(editor); })"
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "server.env",
                    "preload": [
                      ""
                    ],
                    "readonly": true,
                    "save": false
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "bootstrap.properties",
                    "preload": [
                     ],
                    "readonly": true,
                    "save": false                 }
                ]
              },
              {
                "displayType":"webBrowser",
                "url": "https://mycarvendor.com/car-types",
                "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-from-property-in-system-props.html",
                "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForPropFileConfig(webBrowser); })"
              }
            ]
        },
        {
            "name": "DefaultPlayground",
            "title": "Default ConfigSources playground",
            "description": [
                "temp"
            ],
            "content": [
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType": "fileEditor",
                            "fileName": "Injection",
                            "preload": [
                                "package com.car.types;",
                                "import javax.inject.Inject;",
                                "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                                "",
                                "public class CarTypes {",
                                "",
                                "    @Inject @ConfigProperty(name=\"port\", defaultValue=\"9080\");",
                                "    private Integer port;",
                                "",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "5"
                                }
                            ],
                            "callback": "(function test(editor) {microprofileConfigCallBack.updatePlaygroundProperties(editor);})"
                        },
                        {
                            "displayType": "fileEditor",
                            "fileName": "Properties",
                            "preload": [
                                "port=9081"
                            ],
                            "callback": "(function test(editor) {microprofileConfigCallBack.updatePlaygroundProperties(editor);})"
                        },
                        {
                            "displayType": "fileEditor",
                            "fileName": "Environment Property",
                            "preload": [

                            ],
                            "callback": "(function test(editor) {microprofileConfigCallBack.updatePlaygroundProperties(editor);})"
                        },
                        {
                            "displayType": "fileEditor",
                            "fileName": "System Property",
                            "preload": [
                                "port=9083"
                            ],
                            "callback": "(function test(editor) {microprofileConfigCallBack.updatePlaygroundProperties(editor);})"
                        }
                    ]
                },
                {
                    "displayType": "pod",
                    "content": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/playground.html",
                    "callback": "(function(pod) {microprofileConfigCallBack.createPlayground(pod, 'DefaultPlayground')})"
                }
            ]
        },
        {
            "name": "WhatNext",
            "title": "Great work!  You're done!",
            "description": ["You learned how ......",
                            "<p> <a >Download the sample MicroProfile Config application on github</a>.</p>"
                           ]
        }

    ]
}
