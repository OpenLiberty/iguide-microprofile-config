{
    "name": "MicroprofileConfig",
    "title": "Microprofile Config",
    "description": "Use MicroProfile Config to separate configuration from code",
    "duration": "25 minutes",
    "audience": "developer",
    "repo": "https://github.com/OpenLiberty/iguide-microprofile-config",
    "defaultWidgets": [
        {   
            "displayType": "webBrowser",
            "url": "https://mycarvendor.openliberty.io/car-types",
            "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/welcome.html",
            "enable": false
        },
        {   
            "displayType": "tabbedEditor",
            "enable": false,
            "editorList": [
            {
                "displayType": "fileEditor",
                "fileName": "server.xml",
                "preload": [
                    "<?xml version=\"1.0\"?>",
                    "<server description=\"Sample Liberty server\">",
                    "   <featureManager>",
                    "      <feature>cdi-1.2</feature>",
                    "      <feature>jaxrs-2.0</feature>",
                    "",
                    "   </featureManager>",
                    "   <httpEndpoint host=\"*\" id=\"defaultHttpEndpoint\" httpsPort=\"${default.https.port}\"",
                    "   httpPort=\"{default.http.port}\"/>",
                    "</server>"
                ],
                "save": true
            }
            ]
        }
    ],
    "configWidgets": [
        {   
            "displayType": "webBrowser",
            "height": "300px"
        },
        {   
            "displayType": "pod",
            "height": "200px"
        },
        {
            "displayType": "tabbedEditor",
            "height": "400px"
        }  
    ],
    "steps": [
        {
            "name": "Intro",
            "title": "What you'll learn",
            "guide_duration" : "25 minutes",
            "description": [
              "Explore how to inject configuration data into a microservice without repackaging the application each time the underlying runtime environment changes. <a href='https://microprofile.io/' target='_blank' rel='noopener noreferrer'>MicroProfile</a> makes building configurable microservices easy with its <a href='https://github.com/eclipse/microprofile-config' target='_blank' rel='noopener noreferrer'>MicroProfile Config</a> feature. Application configuration properties from multiple sources are combined into a single set of configuration properties and accessed from a single API by your application.",
              "Using the MicroProfile Config API, the sample application illustrates how a configuration property can be assigned a value in multiple configuration sources. Each source is assigned a priority. The value from the source with the highest priority takes precedence over that from a lower priority. This method allows code to run unchanged under different configurations for development, test, quality assurance, and production environments since an existing configuration value can easily be overridden as the need arises."
            ],
            "sections" : [
                {
                  "name": "backgroundConcepts",
                  "title": "Background concepts",
                  "description": [
                    "MicroProfile Config uses Contexts and Dependency Injection <b><i>(CDI)</i></b> to inject configuration property values directly into an application without requiring user code to retrieve them. The injected values are defined as <b><i>static</i></b> because they are set only at application startup.",
                    "The API combines configuration values from multiple sources, each known as a <b><i>ConfigSource</b></i>. Each ConfigSource has a specified priority, defined by its <b><i>ordinal</i></b> value. A higher ordinal means that the values taken from this ConfigSource will override values from ConfigSources with a lower ordinal value.",
                    "MicroProfile Config has 3 default ConfigSources:",
                    "<ul><li>All <code>META-INF/microprofile-config.properties</code> found on the class path (default ordinal = 100).</li><li>Environment variables (default ordinal = 300).</li><li>System properties (default ordinal = 400).</li></ul>",
                    "An optional default value can be specified using Java annotations. The optional default value applies if the application does not find configuration values in any of the ConfigSources. The priority of each ConfigSource and the optional default value is shown in the following diagram:",
                    "<div class='ordinalPriorities'><img src='/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/images/ordinalPriorities.svg' alt='Ordinal Priorities'></div>"
                  ]
                }
            ]
        },
        {
            "name": "ExampleScenario",
            "title": "Example: DevOps pipeline",
            "description": [
                "Imagine that you're developing and deploying a DisplayCarTypes microservice so that you can display the types of cars that are currently available for purchase from your business. This microservice has a dependency on another microservice called ObtainCarTypes, which provides the currently available list. As you develop your DisplayCarTypes microservice, you need to ensure that it works correctly when it interacts with the ObtainCarTypes microservice. For stability and security reasons, you don't want to test against the production version of ObtainCarTypes during the development pipeline. Instead, you run four instances of the ObtainCarTypes microservice, one for each stage of the devOps pipeline as shown in the following diagram:",
                "",
                "<div class=\"devOpsPipeline\"><center><img src=\"/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/images/intro.svg\" alt=\"DisplayCarTypes microservice can connect to one of the ObtainCarTypes instances: Development on port 9080, Test on port 9081, Quality Assurance on port 9082, Production on port 9083\"></center></div>",
                "As you progress through this guide, you will set a configuration property for the port value to specify which of the four ObtainCarTypes instances the DisplayCarTypes microservice should connect to. "
            ],
            "content": [
                {   
                    "displayType": "webBrowser",
                    "url": "https://mycarvendor.openliberty.io/car-types",
                    "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/welcome.html",
                    "enable": false
                },
                {   
                    "displayType": "tabbedEditor",
                    "enable": false,
                    "editorList": [
                    {
                        "displayType": "fileEditor",
                        "fileName": "server.xml",
                        "preload": [
                            "<?xml version=\"1.0\"?>",
                            "<server description=\"Sample Liberty server\">",
                            "   <featureManager>",
                            "      <feature>cdi-1.2</feature>",
                            "      <feature>jaxrs-2.0</feature>",
                            "",
                            "   </featureManager>",
                            "   <httpEndpoint host=\"*\" id=\"defaultHttpEndpoint\" httpsPort=\"${default.https.port}\"",
                            "   httpPort=\"{default.http.port}\"/>",
                            "</server>"
                        ],
                        "save": true
                    }
                    ]
                }
            ]
        },
        {
            "name": "EnableMPConfig",
            "title": "Enabling MicroProfile Config",
            "description": [
                "Begin by enabling the MicroProfile Config 1.1 feature in your <code>server.xml</code> file. This feature allows you to use the MicroProfile Config API to externalize configuration data."
            ],
            "instruction": [
              "Add the following element declaration inside the featureManager element of the <code>server.xml</code> file, or click <action tabindex='0' role='button' title='Enable MicroProfile Config' aria-label='Enable MicroProfile Config' onkeypress=\"microprofileConfigCallBack.addMicroProfileConfigFeatureButton(event, 'EnableMPConfig')\" onclick=\"microprofileConfigCallBack.addMicroProfileConfigFeatureButton(event, 'EnableMPConfig')\">&lt;feature&gtmpConfig-1.1&lt;/feature&gt;</action>. Then, click <action tabindex='0' role='button' title='Save' aria-label='Save' onkeypress=\"microprofileConfigCallBack.saveTabbedEditorButton(event, 'EnableMPConfig')\" onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event, 'EnableMPConfig')\">Save</action> on the editor menu pane."
            ],
            "content":[
                {   
                    "displayType": "webBrowser",
                    "url": "https://mycarvendor.openliberty.io/car-types",
                    "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/welcome.html",
                    "enable": false
                },
                {
                  "displayType":"tabbedEditor",
                  "active": true,
                  "activeTab": "server.xml",
                  "editorList": [
                    {
                        "displayType":"fileEditor",
                        "fileName": "server.xml",
                        "preload": [
                          "<?xml version=\"1.0\"?>",
                          "<server description=\"Sample Liberty server\">",
                          "   <featureManager>",
                          "      <feature>cdi-1.2</feature>",
                          "      <feature>jaxrs-2.0</feature>",
                          "",
                          "   </featureManager>",
                          "   <httpEndpoint host=\"*\" id=\"defaultHttpEndpoint\" httpsPort=\"${default.https.port}\"",
                          "   httpPort=\"${default.http.port}\"/>",
                          "</server>"
                        ],
                        "readonly": [
                          {
                              "from": "1",
                              "to": "5"
                          },
                          {
                              "from": "7",
                              "to": "10"
                          }
                        ],
                        "writable": [
                            {
                                "line": "6"
                            }
                        ],
                        "save": true,
                        "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForFeatureInServerXML(editor); })"
                    }
                  ]                
              }
            ]
        },
        {
            "name": "ConfigureViaInject",
            "title": "Injecting configuration through @ConfigProperty annotation",
            "description": [
                "After you modify your <code>server.xml</code> file to <a href='#enabling-microprofile-config'>include the mpConfig feature</a>, inject a single configuration property value directly into your code with the <code>@Inject</code> and the <code>@ConfigProperty</code> annotations. The injected value is static and does not change after the application starts.",
                "",
                "You can specify a value in the runtime environment for mandatory configuration properties. Properties are mandatory when the annotation does not specify an optional default value. When the mandatory configuration property value is not found in any of the ConfigSources, a <code>NoSuchElementException</code> is thrown during application startup."
            ],
            "instruction": [
                "To inject a mandatory <code>port</code> configuration property into the code, add the following <code>@Inject</code> and <code>@ConfigProperty</code> annotations to line 9 before declaring the <code>private int port</code>, or click  <action title='Inject a ConfigProperty' onclick='microprofileConfigCallBack.addInjectConfigButton(event, \"ConfigureViaInject\")'>@Inject @ConfigProperty(name=\"port\")</action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event, 'ConfigureViaInject')\">Run</action> on the editor menu pane to see the exception occur."
            ],
            "content":[
                {   
                    "displayType": "webBrowser",
                    "url": "https://mycarvendor.openliberty.io/car-types",
                    "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/welcome.html",
                    "enable": false
                },
                {
                    "displayType": "pod"
                },
                {
                    "displayType":"tabbedEditor",
                    "active": true,
                    "activeTab": "InventoryConfig.java",
                    "editorList": [
                        {
                            "displayType":"fileEditor",
                            "fileName": "InventoryConfig.java",
                            "preload": [
                                "package io.openliberty.guides.mpconfig;",
                                "",
                                "import javax.inject.Inject;",
                                "import javax.enterprise.context.ApplicationScoped;",
                                "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                                "",
                                "@ApplicationScoped",
                                "public class InventoryConfig {",
                                "",
                                "    private int port;",
                                "",
                                "    public int getPort() {",
                                "      return port;",
                                "    }",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "8"
                                },
                                {
                                    "from": "10",
                                    "to": "15"
                                }
                            ],
                            "writable": [
                                {
                                    "line": "9"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForInjectConfig(editor); })"
                        }
                    ]
                }
            ]
        },
        {
            "name": "InjectWithDefaultValue",
            "title": "Providing optional default values",
            "TOCIndent": 1,
            "description": [
                "You can specify a default value for a configuration property using the <b>defaultValue</b> parameter in the <code>@ConfigProperty</code> annotation. This value is used when a value is not specified in any MicroProfile Config configuration source."
            ],
            "instruction": [
                "Change the <code>@ConfigProperty</code> annotation on line 9 to the following code, or click <action title='Provide default value using ConfigProperty annotation' onclick=\"microprofileConfigCallBack.addInjectDefaultConfigButton(event, 'InjectWithDefaultValue')\">@Inject @ConfigProperty(name=\"port\",\n defaultValue=\"9080\")</action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event, 'InjectWithDefaultValue')\">Run</action> on the editor menu pane.",
                "Type the following URL into the browser that follows, or click <action title='URL' onclick=\"microprofileConfigCallBack.populateURL(event, 'InjectWithDefaultValue')\">https://mycarvendor.openliberty.io/car-types</action> and then press <action title='Enter' onclick=\"microprofileConfigCallBack.enterButtonURL(event, 'InjectWithDefaultValue')\">Enter</action>. The development port (9080) of the ObtainCarTypes microservice returns the values <code>carA</code> and <code>carB</code>."
            ],
            "content":[
                {
                    "displayType":"webBrowser",
                    "url": "",
                    "browserContent": "",
                    "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForInjectDefaultConfig(webBrowser); })",
                    "enable": true
                },
                {
                    "displayType":"tabbedEditor",
                    "active": true,
                    "activeTab": "InventoryConfig.java",
                    "editorList": [
                        {
                            "displayType":"fileEditor",
                            "fileName": "InventoryConfig.java",
                            "preload": [
                                "package io.openliberty.guides.mpconfig;",
                                "",
                                "import javax.inject.Inject;",
                                "import javax.enterprise.context.ApplicationScoped;",
                                "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                                "",
                                "@ApplicationScoped",
                                "public class InventoryConfig {",
                                "    @Inject @ConfigProperty(name=\"port\")",
                                "    private int port;",
                                "",
                                "    public int getPort() {",
                                "      return port;",
                                "    }",
                                "}"
                            ],
                            "readonly": [
                               {
                                    "from": "1",
                                    "to": "8"
                               },
                               {
                                    "from": "10",
                                    "to": "15"
                               }
                            ],
                            "writable": [
                                {
                                    "line": "9"
                                }
                            ],
                            "save": false,
                            "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForInjectDefaultConfig(editor); })"
                        }
                    ]                    
                }
            ]
        },
        {
            "name": "ConfigurePropsFile",
            "title": "Configuring with the properties file",
            "description": [
                "You can provide the <code>/META-INF/microprofile-config.properties</code> file as part of your packaged application. The <code>/META-INF/microprofile-config.properties</code> file may be created in multiple locations, but you must specify these file locations in your class path. Do not specify the same configuration property in multiple <code>/META-INF/microprofile-config.properties</code> files that have the same ordinal value, or the application returns an indeterminate property value.",
                "",
                "The properties file contains settings with a default ordinal of 100, which overrides the injected default values with the same key so the <code>port</code> property value in the <code>microprofile-config.properties</code> file is used."
            ],
            "instruction": [
                "In <code>/META-INF/microprofile-config.properties</code>, add the following on line 1, or click <action title='Configure port in microprofile-config.properties' onclick=\"microprofileConfigCallBack.addPropToConfigPropsButton(event, 'ConfigurePropsFile')\">port=9081</action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event, 'ConfigurePropsFile')\">Run</action> on the editor menu pane.",
                "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event, 'ConfigurePropsFile')\">Refresh</action> in the following browser to see that the port value in the <code>/META-INF/microprofile-config.properties</code> file is used. The test port (9081) of the ObtainCarTypes microservice returns the values <code>typeA</code>, <code>typeB</code>, and <code>typeC</code>."
            ],
            "content":[
                {
                    "displayType":"webBrowser",
                    "url": "https://mycarvendor.openliberty.io/car-types",
                    "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-from-injection.html",
                    "statusBarText": "Retrieved data from Development on port 9080.",
                    "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForPropFileConfig(webBrowser); })"
                },
                {
                    "displayType": "tabbedEditor",
                    "active": true,
                    "activeTab": "META-INF/microprofile-config.properties",
                    "callback": "(function test(tabbedEditor) {microprofileConfigCallBack.listenToEditorTabChange(tabbedEditor, 0, 'META-INF/microprofile-config.properties'); })",
                    "editorList": [
                      {
                        "displayType":"fileEditor",
                        "fileName": "InventoryConfig.java",
                        "preload": [
                            "package io.openliberty.guides.mpconfig;",
                            "",
                            "import javax.inject.Inject;",
                            "import javax.enterprise.context.ApplicationScoped;",
                            "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                            "",
                            "@ApplicationScoped",
                            "public class InventoryConfig {",
                              "    @Inject",
                              "    @ConfigProperty(name=\"port\", ",
                              "                   defaultValue=\"9080\")",
                              "    private int port;",
                              "",
                              "    public int getPort() {",
                              "      return port;",
                              "    }",
                              "}"
                        ],
                        "readonly": true,
                        "save": false
                      },
                      {
                        "displayType":"fileEditor",
                        "fileName": "META-INF/microprofile-config.properties",
                        "readonly": false,
                        "save": false,
                        "preload": [
                            ""
                        ],
                        "writable": [
                            {
                                "line": "1"
                            }
                        ],
                        "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForPropConfig(editor); })"
                      }
                    ]
                }
            ]
        },
        {
            "name": "ConfigureAsEnvVar",
            "title": "Configuring with an environment variable",
            "description": [
                "In Open Liberty, you can use <code>server.env</code> files at the installation and server levels to specify environment variables. The installation level file is located at <code>${wlp.install.dir}/etc/server.env</code>, and the server level file is located at <code>${server.config.dir}/server.env</code>. If both files exist, the contents of the two files are merged. If the same environment variable is in both files, the value in the server level file takes precedence over the value in the installation level file.",
                "",
                "Environment variables can also be set using the command line.",
                "",
                "Use the <code>${server.config.dir}/server.env</code> file to configure the <code>port</code> environment variable. The <code>server.env</code> file contains the environment settings with a default ordinal value of 300 which is higher than the default ordinal value of 100 for the <code>/META-INF/microprofile-config.properties</code> file. Thus, the <code>port</code> property value in <code>server.env</code> is used."
            ],
            "instruction": [
              "In <code>server.env</code>, add the following on line 1, or click <action title='Configure port in server.env' onclick=\"microprofileConfigCallBack.addPropToServerEnvButton(event, 'ConfigureAsEnvVar')\">port=9082</action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event, 'ConfigureAsEnvVar')\">Run</action> on the editor menu pane to save the file and restart the server.",
              "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event, 'ConfigureAsEnvVar')\">Refresh</b></action> in the following browser to see that the port value in the server.env file is used. The quality assurance port (9082) of the ObtainCarTypes microservice returns the values <code>SUV</code>, <code>Crossover</code>, <code>Coupe</code>, and <code>Truck</code>."
            ],
            "content":[
                {
                    "displayType":"webBrowser",
                    "url": "https://mycarvendor.openliberty.io/car-types",
                    "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-from-properties-file.html",
                    "statusBarText": "Retrieved data from Test on port 9081.",
                    "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForServerEnvConfig(webBrowser); })"
                },
              {
                "displayType": "tabbedEditor",
                "active": true,
                "activeTab": "server.env",
                "callback": "(function test(tabbedEditor) {microprofileConfigCallBack.listenToEditorTabChange(tabbedEditor, 0, 'server.env'); })",
                "editorList": [
                  {
                    "displayType":"fileEditor",
                    "fileName": "InventoryConfig.java",
                    "preload": [
                        "package io.openliberty.guides.mpconfig;",
                        "",
                        "import javax.inject.Inject;",
                        "import javax.enterprise.context.ApplicationScoped;",
                        "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                        "",
                        "@ApplicationScoped",
                        "public class InventoryConfig {",
                          "    @Inject",
                          "    @ConfigProperty(name=\"port\", ",
                          "                   defaultValue=\"9080\")",
                          "    private int port;",
                          "",
                          "    public int getPort() {",
                          "      return port;",
                          "    }",
                          "}"
                    ],
                    "readonly": true,
                    "save": false
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "META-INF/microprofile-config.properties",
                    "preload": [
                        "port=9081"
                    ],
                    "readonly": true,
                    "save": false
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "server.env",
                    "preload": [
                      ""
                    ],
                    "writable": [
                        {
                            "line": "1"
                        }
                    ],
                    "save": false,
                    "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForServerEnv(editor); })"
                  }
                ]
              }
            ]
        },
        {
            "name": "ConfigureAsSysProp",
            "title": "Configuring with a system property",
            "description": [
                "Configuration variables can be retrieved from the Java system properties, which have a default ordinal of 400. Open Liberty adds properties from the server’s <code>bootstrap.properties</code> and <code>jvm.options</code> files to the Java system properties. You can create and configure the <code>jvm.options</code> file in multiple locations within your Open Liberty installation directory.",
                "",
                "The following list shows the different locations where Open Liberty checks for <code>jvm.options</code> files:",
                "<ol><li><code>${wlp.install.dir}/usr/shared/jvm.options</code></li><li><code>${server.config.dir}/configDropins/defaults/jvm.options</code></li> <li><code>${server.config.dir}/jvm.options</code></li> <li><code>${server.config.dir}/configDropins/overrides/jvm.options</code></li></ol>",
                "The contents of these files are merged. The latter files take precedence in the case of duplicate properties. If none of these files are present, then the <code>${wlp.install.dir}/etc/jvm.options</code> file is used. If a property exists in both <code>bootstrap.properties</code> and <code>jvm.options</code>, then the value from <code>jvm.options</code> takes precedence.",
                "",
                "In this example, use the <code>${server.config.dir}/bootstrap.properties</code> file to configure the <code>port</code> system property."
            ],
            "instruction": [
                "Add the following port value on line 1 of <code>bootstrap.properties</code>, or click <action title='Configure port in System Properties' onclick=\"microprofileConfigCallBack.addPropToSystemPropertiesButton(event,'ConfigureAsSysProp')\">port=9083</action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event, 'ConfigureAsSysProp')\">Run</action> on the editor menu pane to save the file and restart the server.",
                "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event, 'ConfigureAsSysProp')\">Refresh</action> in the following browser to see that the port value in the <code>bootstrap.properties</code> file is used. The production port (9083) of the ObtainCarTypes microservice returns values <code>SUV</code>, <code>Crossover</code>, <code>Coupe</code>, <code>Truck</code>, and <code>Convertible</code>."
            ],
            "content":[
                {
                    "displayType":"webBrowser",
                    "url": "https://mycarvendor.openliberty.io/car-types",
                    "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-from-property-in-server-env.html",
                    "statusBarText": "Retrieved data from Quality Assurance on port 9082.",
                    "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForSystemPropConfig(webBrowser); })"
                },
                {
                  "displayType": "tabbedEditor",
                  "active": true,
                  "activeTab": "bootstrap.properties",
                  "callback": "(function test(tabbedEditor) {microprofileConfigCallBack.listenToEditorTabChange(tabbedEditor, 0, 'bootstrap.properties'); })",
                  "editorList": [
                    {
                      "displayType":"fileEditor",
                      "fileName": "InventoryConfig.java",
                      "preload": [
                        "package io.openliberty.guides.mpconfig;",
                        "",
                        "import javax.inject.Inject;",
                        "import javax.enterprise.context.ApplicationScoped;",
                        "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                        "",
                        "@ApplicationScoped",
                        "public class InventoryConfig {",
                          "    @Inject",
                          "    @ConfigProperty(name=\"port\", ",
                          "                   defaultValue=\"9080\")",
                          "    private int port;",
                          "",
                          "    public int getPort() {",
                          "      return port;",
                          "    }",
                          "}"
                      ],
                      "readonly": true,
                      "save": false
                    },
                    {
                      "displayType":"fileEditor",
                      "fileName": "META-INF/microprofile-config.properties",
                      "preload": [
                          "port=9081"
                      ],
                      "readonly": true,
                      "save": false
                    },
                    {
                      "displayType":"fileEditor",
                      "fileName": "server.env",
                      "preload": [
                        "port=9082"
                      ],
                      "readonly": true,
                      "save": false
                    },
                    {
                        "displayType":"fileEditor",
                        "fileName": "bootstrap.properties",
                        "preload": [
                              ""
                        ],
                        "writable": [
                            {
                                "line": "1"
                            }
                        ],
                        "save": false,
                        "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForSystemProperties(editor); })"
                    }
                  ]
                }
            ]
        },
        {
            "name": "UpdateOrdinal",
            "title": "Changing the ordinal of a ConfigSource",
            "description": [
                "You can override the default ordinal value of a ConfigSource by adding the <code>config_ordinal</code> property to your configuration source file. The configuration source with the highest ordinal value takes precedence.",
                "",
                "Adding <code>config_ordinal</code> to <code>/META-INF/microprofile-config.properties</code> with a value of 500 increases its ordinal value. The port value from <code>/META-INF/microprofile-config.properties</code> now overrides the port value from <code>bootstrap.properties</code>, which has a default ordinal of 400."
            ],
            "instruction": [
                "On line 2 of the <code>/META-INF/microprofile-config.properties</code> file add the following, or click <action title='Changing the ordinal of microprofile-config.properties' onclick=\"microprofileConfigCallBack.addConfigOrdinalToPropsButton(event, 'UpdateOrdinal')\">config_ordinal=500</action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event, 'UpdateOrdinal')\">Run</action> on the editor menu pane.",
                "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event, 'UpdateOrdinal')\">Refresh</action> in the following browser to see that the port value in the <code>/META-INF/microprofile-config.properties</code> file is used instead of the one defined in the <code>bootstrap.properties</code> file. The test port (9081) of the ObtainCarTypes microservice returns the values typeA, typeB, and typeC."
            ],
            "content":[
                {
                    "displayType":"webBrowser",
                    "url": "https://mycarvendor.openliberty.io/car-types",
                    "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-from-property-in-system-props.html",
                    "statusBarText": "Retrieved data from Production on port 9083.",
                    "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForPropFileConfig(webBrowser); })"
                },
              {
                "displayType": "tabbedEditor",
                "active": true,
                "activeTab": "META-INF/microprofile-config.properties",
                "callback": "(function test(tabbedEditor) {microprofileConfigCallBack.listenToEditorTabChange(tabbedEditor, 0, 'META-INF/microprofile-config.properties'); })",
                "editorList": [
                  {
                    "displayType":"fileEditor",
                    "fileName": "InventoryConfig.java",
                    "preload": [
                        "package io.openliberty.guides.mpconfig;",
                        "",
                        "import javax.inject.Inject;",
                        "import javax.enterprise.context.ApplicationScoped;",
                        "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                        "",
                        "@ApplicationScoped",
                        "public class InventoryConfig {",
                          "    @Inject",
                          "    @ConfigProperty(name=\"port\", ",
                          "                   defaultValue=\"9080\")",
                          "    private int port;",
                          "",
                          "    public int getPort() {",
                          "      return port;",
                          "    }",
                          "}"
                    ],
                    "readonly": true,
                    "save": false
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "META-INF/microprofile-config.properties",
                    "save": false,
                    "preload": [
                        "port=9081",
                        ""
                    ],
                    "readonly": [
                      {
                        "from": "1",
                        "to": "1"
                      }
                    ],
                    "writable": [
                        {
                            "line": "2"
                        }
                    ],
                    "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForOrdinalChange(editor); })"
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "server.env",
                    "preload": [
                      "port=9082"
                    ],
                    "readonly": true,
                    "save": false
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "bootstrap.properties",
                    "preload": [
                        "port=9083"
                     ],
                    "readonly": true,
                    "save": false                 }
                ]
              }
            ]
        },
        {
            "name": "DefaultPlayground",
            "title": "Default ConfigSources playground",
            "description": [
                "Now that you've learned the various ways of defining configuration properties, you can see how they all work together.",
                "To review, here are the four places to inject properties:",
                "<ul>",
                "<li>Java annotations <code>@Inject @ConfigProperty</code> with <code>defaultValue</code> in <code>InventoryConfig.java</code> (no ordinal)",
                "<li>Properties file through <code>/META-INF/microprofile-config.properties</code> (default ordinal = 100)",
                "<li>Environment variables through <code>server.env</code> (default ordinal = 300)",
                "<li>System properties through <code>bootstrap.properties</code> (default ordinal = 400)",
                "</ul>",
                "Use the editor to inject various properties into the files. Use <code>@Inject @ConfigProperty (name=\"propertyName\");</code> to include the new properties in the <code>InventoryConfig.java</code> file. You can set the <code>config_ordinal</code> in any of the properties files. The following diagrams show the file ordinal priority and the property values being used:"
            ],
            "content": [
                {
                    "displayType":"webBrowser",
                    "url": "https://mycarvendor.openliberty.io/car-types",
                    "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-from-property-in-system-props.html",
                    "statusBarText": "Retrieved data from Production on port 9083.",
                    "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForPropFileConfig(webBrowser); })",
                    "enable": false
                },
                {
                    "displayType": "pod",
                    "content": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/playground.html",
                    "callback": "(function(pod) {microprofileConfigCallBack.createPlayground(pod, 'DefaultPlayground')})"
                },
                {
                    "displayType": "tabbedEditor",
                    "active": true,
                    "editorList": [
                        {
                            "displayType": "fileEditor",
                            "fileName": "InventoryConfig.java",
                            "preload": [
                                "package io.openliberty.guides.mpconfig;",
                                "",
                                "import javax.inject.Inject;",
                                "import javax.enterprise.context.ApplicationScoped;",
                                "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                                "",
                                "@ApplicationScoped",
                                "public class InventoryConfig {",
                                  "    @Inject",
                                  "    @ConfigProperty(name=\"port\", ",
                                  "                   defaultValue=\"9080\")",
                                  "    private int port;",
                                  "",
                                  "    public int getPort() {",
                                  "      return port;",
                                  "    }",
                                  "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "8"
                                }
                            ],
                            "callback": "(function test(editor) {microprofileConfigCallBack.updatePlaygroundProperties(editor);})",
                            "save": false
                        },
                        {
                            "displayType": "fileEditor",
                            "fileName": "/META-INF/microprofile-config.properties",
                            "preload": [
                                "port=9081"
                            ],
                            "callback": "(function test(editor) {microprofileConfigCallBack.updatePlaygroundProperties(editor);})",
                            "save": false
                        },
                        {
                            "displayType": "fileEditor",
                            "fileName": "server.env",
                            "preload": [
                                "port=9082"
                            ],
                            "callback": "(function test(editor) {microprofileConfigCallBack.updatePlaygroundProperties(editor);})",
                            "save": false
                        },
                        {
                            "displayType": "fileEditor",
                            "fileName": "bootstrap.properties",
                            "preload": [
                                "port=9083"
                            ],
                            "callback": "(function test(editor) {microprofileConfigCallBack.updatePlaygroundProperties(editor);})",
                            "save": false
                        }
                    ]
                }
            ]
        },
        {
            "name": "WhatNext",
            "title": "Great work!  You're done!",
            "description": ["You learned how to use MicroProfile Config to separate configuration from code by using injection, configuring with properties files, configuring with environment variables, and configuring with system properties. You also learned the default ordinals for each of these configuration sources and how to override them.",
                            "<p> <a href='https://github.com/OpenLiberty/iguide-microprofile-config/blob/dev/finish/sampleapp_mpconfig.zip'>Download the sample MicroProfile Config application on github</a>.</p>"
                           ]
        }

    ]
}
