{
    "name": "MicroprofileConfig",
    "title": "Microprofile Config",
    "description": "Creating a unified config for your sources",
    "duration": "10 minutes",
    "audience": "developer",
    "repo": "https://github.com/OpenLiberty/iguide-microprofile-config",
    "steps": [
        {
            "name": "Intro",
            "title": "What you'll learn",
            "guide_duration" : "25 minutes",
            "description": [
              "temp"
            ],
            "sections" : [
                {
                  "name": "backgroundConcepts",
                  "title": "Background concepts",
                  "description": [
                    "temp"
                  ]
                }
            ]
        },
        {
            "name": "ExampleScenario",
            "title": "Example: xxx",
            "description": [
                "temp"
            ]
        },
        {
            "name": "EnableMPConfig",
            "title": "Enabling the MicroProfile Config feature",
            "description": [
                "Begin by enabling the MicroProfile Config 1.1 feature in your <code>server.xml</code> file."
            ],
            "instruction": [
              "Add the following element declaration inside the featureManager element to the <code>server.xml</code> file, or click <action tabindex='0' role='button' title='Enable MicroProfile Config' aria-label='Enable MicroProfile Config' onkeypress=\"microprofileConfigCallBack.addMicroProfileConfigFeatureButton(event)\" onclick=\"microprofileConfigCallBack.addMicroProfileConfigFeatureButton(event)\"><b>&lt;feature&gtmpConfig-1.1&lt;/feature&gt;</b></action>. Then, click <action tabindex='0' role='button' title='Save' aria-label='Save' onkeypress=\"microprofileConfigCallBack.saveButton(event)\" onclick=\"microprofileConfigCallBack.saveButton(event)\"><b>Save</b></action> on the editor menu pane."            ],
            "content":[
              {
                "displayType":"fileEditor",
                "fileName": "server.xml",
                "preload": [
                  "<?xml version=\"1.0\"?>",
                  "<server description=\"Sample Liberty server\">",
                  "   <featureManager>",
                  "      <feature>cdi-1.2</feature>",
                  "      <feature>jaxrs-2.0</feature>",
                  "",
                  "   </featureManager>",
                  "   <httpEndpoint host=\"*\" id=\"defaultHttpEndpoint\" httpsPort=\"${default.https.port}\"",
                  "   httpPort=\"{default.http.port}\"/>",
                  "</server>"
                ],
                "readonly": [
                  {
                      "from": "1",
                      "to": "5"
                  },
                  {
                      "from": "7",
                      "to": "10"
                  }
                ],
                "save": true,
                "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForFeatureInServerXML(editor); })"
              }
            ]
        },
        {
            "name": "ConfigureViaInject",
            "title": "Injecting configuration properties through annotations",
            "description": [
                "After you modify your <code>server.xml</code> file to <a>include the mpConfig feature</a>, a single configuration property value can be injected directly into your code using the <code>@Inject</code> and the <code>@ConfigProperty</code> annotations. The injected value is set when the application starts and is static.<br>",
                "Injecting a configuration value this way is recommended for mandatory properties. If no configured value exists for this property, a <code>DeploymentException</code> will be thrown during startup."
            ],
            "instruction": [
                "To inject a <code>download_url</code> configuration property into the code, add the following <code>@Inject</code> and <code>@ConfigProperty</code> annotations to line 11 before declaring the <code>private String downloadUrl</code>, or click  <action title='Inject a ConfigProperty' onclick='microprofileConfigCallBack.addInjectConfigButton(event)'><b>@Inject @ConfigProperty(name=\"download_url\")</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveButton(event)\"><b>Run</b></action> on the editor menu pane.<br><br><note>Note: You have not yet specified a value for the <code>download_url</code> configuration property.  Execution of this code at this time would cause a <code>DeploymentException</code> to be thrown since a value is required.</note>",
                "Type the following URL into the browser that follows, or click <action title='URL' onclick=\"microprofileConfigCallBack.populateURL(event, 'ConfigureViaInject')\"><b>https://music.com/play</b></action> and then press <action title='Enter' onclick=\"microprofileConfigCallBack.enterButtonURL(event, 'ConfigureViaInject')\"><b>Enter</b></action>."
            ],
            "content":[
                {
                    "displayType":"fileEditor",
                    "fileName": "Music-download.java",
                    "preload": [
                        "package com.music.download;",
                        "import javax.inject.Inject;",
                        "import org.eclipse.microprofile.config.Config;",
                        "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                        "",
                        "public class Music-download {",
                        "",
                        "    @Inject",
                        "    private Config config;",
                        "",
                        "",
                        "    private String downloadUrl;",
                        "",
                        "    public void download() {",
                        "        downloadService(downloadUrl);",
                        "    }",
                        "}"
                    ],
                    "readonly": [
                       {
                            "from": "1",
                            "to": "10"
                       },
                       {
                            "from": "12",
                            "to": "17"
                       }
                    ],
                    "save": false,
                    "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForInjectConfig(editor); })"
                },
                {
                    "displayType":"webBrowser",
                    "url": "",
                    "browserContent": "",
                    "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForInjectConfig(webBrowser); })"
                }
            ]
        },
        {
            "name": "InjectWithDefaultValue",
            "title": "Providing default values with injection",
            "TOCIndent": 1,
            "description": [
                "You can specify a default value for a configuration property using the <b>defaultValue</b> parameter in the <code>@ConfigProperty</code> annotation.  If the property is not assigned a value anywhere else, then it will be assigned this default value.<br>"
            ],
            "instruction": [
                "Change the @ConfigProperty annotation on line 11 to the following code, or click <action title='Provide default value using ConfigProperty annotation' onclick=\"microprofileConfigCallBack.addInjectDefaultConfigButton(event)\"><b>@Inject @ConfigProperty(name=\"download_url\", defaultValue=\"ftp://music.com/us-east/download\")</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveButton(event)\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event)\"><b>Refresh</b></action> in the following browser to see that the download_url via the injection is used.<br/>"
            ],
            "content":[
                {
                    "displayType":"fileEditor",
                    "fileName": "Music-download.java",
                    "preload": [
                        "package com.music.download;",
                        "import javax.inject.Inject;",
                        "import org.eclipse.microprofile.config.Config;",
                        "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                        "",
                        "public class Music-download {",
                        "",
                        "    @Inject",
                        "    private Config config;",
                        "",
                        "    @Inject @ConfigProperty(name=\"download_url\")",
                        "    private String downloadUrl;",
                        "",
                        "    public void download() {",
                        "        downloadService(downloadUrl);",
                        "    }",
                        "}"
                    ],
                    "readonly": [
                       {
                            "from": "1",
                            "to": "10"
                       },
                       {
                            "from": "12",
                            "to": "17"
                       }
                    ],
                    "save": false,
                    "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForInjectDefaultConfig(editor); })"
                },
                {
                    "displayType":"webBrowser",
                    "url": "https://music.com/play",
                    "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-deployment-exception.html",
                    "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForInjectDefaultConfig(webBrowser); })"
                }
            ]
        },
        {
            "name": "ConfigureDefaultConfigSources",
            "title": "Using default ConfigSources to provide configuration data",
            "description": [
                "A <b>ConfigSource</b> is a source for configured values.  Each ConfigSource has a specified <b>ordinal</b>, which is used to determine the importance of the values taken from the associated ConfigSource. A higher ordinal means that the values taken from this ConfigSource will override values from lower-priority ConfigSources. <br><br>MicroProfile Config has 3 default ConfigSources:",
                "<ul><li>All META-INF/microprofile-config.properties found on the classpath. (default ordinal = 100).</li><li>Environment variables (default ordinal=300).</li><li>System properties (default ordinal=400).</li></ul>Setting values within any of these ConfigSources will override any default value for the configuration property set in the injection."
            ],
            "instruction": [
            ],
            "content":[
            ]
        },
        {
            "name": "ConfigurePropsFile",
            "title": "Configuring with a properties file",
            "TOCIndent": 1,
            "description": [
                "In Websphere Liberty, you can provide a properties file as part of your packaged application. This properties file lets you specify configuration for overriding injected values.",
                "",
                "Add the download_url property to the microprofile-config.properties file to override the injected value of the download_url. The properties file contains settings with a default ordinal of 100 which overrides the injected properties with the same name. If a property appears in more than one source, then the property value from the source with the highest ordinal takes precedence. The download_url property in the microprofile-config.properties will be used because the injected default value is only used when no other config sources are provided."
            ],
            "instruction": [
                "Add the <code>download_url=ftp://music.com/us-south/download</code> on line 1 or click <action title='Configure download_url in microprofile-config.properties' onclick=\"microprofileConfigCallBack.addPropToConfigProps(event)\"><b>download_url=ftp://music.com/us-south/download</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event)\"><b>Run</b></action> on the editor menu pane.",
                "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event)\"><b>Refresh</b></action> in the following browser to see that the download_url in the microprofile-config.properties file is used.<br/>"
            ],
            "content":[
                {
                    "displayType": "tabbedEditor",
                    "activeTab": "META-INF/microprofile-config.properties",
                    "callback": "(function test(tabbedEditor) {microprofileConfigCallBack.listenToEditorTabChange(tabbedEditor, 0, 'META-INF/microprofile-config.properties'); })",
                    "editorList": [
                      {
                        "displayType":"fileEditor",
                        "fileName": "Music-download.java",
                        "preload": [
                              "package com.music.download;",
                              "import javax.inject.Inject;",
                              "import org.eclipse.microprofile.config.Config;",
                              "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                              "",
                              "public class Music-download {",
                              "",
                              "    @Inject",
                              "    @Config config",
                              "",
                              "    @Inject",
                              "    @ConfigProperty(name=\"download_url\", ",
                              "                   defaultValue=\"ftp://music.com/us-east/download\")",
                              "    private String downloadUrl;",
                              "",
                              "    public void download() {",
                              "        downloadService(downloadUrl);",
                              "    }",
                              "}"
                        ],
                        "readonly": true,
                        "save": false
                      },
                      {
                        "displayType":"fileEditor",
                        "fileName": "META-INF/microprofile-config.properties",
                        "readonly": false,
                        "save": false,
                        "preload": [
                            ""
                        ],
                        "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForPropConfig(editor); })"
                      }
                    ]
              }, 
              {
                "displayType":"webBrowser",
                "url": "https://music.com/play",
                "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-from-injection.html",
                "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForPropFileConfig(webBrowser); })"
              }
            ]
        },
        {
            "name": "ConfigureAsEnvVar",
            "title": "Configuring as an environment variable",
            "TOCIndent": 1,
            "description": [
                "In WebSphere Liberty, You can use server.env files at the installation and server levels to specify environment variables. The runtime-level file is located at <code>${wlp.install.dir}/etc/server.env</code> and the server-level is located at <code>${server.config.dir}/server.env</code>. If both files are there, the contents of the two files are merged. If the same environment variable is in both file, value in the server-level file take precedence over value in the runtime-level file. We are going to use the <code>${server.config.dir}/server.env</code> to configure the download_url environment variable.",
                "",
                "After you add your <code>/META-INF/microprofile-config.properties</code> file to override the download_url to us-south region, add the download_url to the <code>${server.config.dir}/server.env</code> file to us-west region . The server.env contains the environment settings with the default ordinal of 300 which is higher than the 100 for the microprofile-config.properties. If a property appears in more than one source, then the property value from the source with the highest ordinal takes precedence. The download_url property in the server.env will be used."
            ],
            "instruction": [
              "Add the <code>download_url=ftp://music.com/us-west/download</code> on line 2, after the WLP_SKIP_MAXPERMSIXE=true or click <action title='Configure download_url in server.env' onclick=\"microprofileConfigCallBack.addPropToServerEnvButton(event)\"><b>download_url=ftp://music.com/us-west/download</b></action>. Then, click <action title='Run' onclick=\"microprofileConfigCallBack.saveTabbedEditorButton(event)\"><b>Run</b></action> on the editor menu pane.",
              "Click <action title='Refresh' onclick=\"microprofileConfigCallBack.refreshBrowserButton(event)\"><b>Refresh</b></action> in the following browser to see the download_url in the server.env file is used.<br/>"
            ],
            "content":[
              {
                "displayType": "tabbedEditor",
                "activeTab": "server.env",
                "callback": "(function test(tabbedEditor) {microprofileConfigCallBack.listenToEditorTabChange(tabbedEditor, 0, 'server.env'); })",
                "editorList": [
                  {
                    "displayType":"fileEditor",
                    "fileName": "Music-download.java",
                    "preload": [
                          "package com.music.download;",
                          "import javax.inject.Inject;",
                          "import org.eclipse.microprofile.config.Config;",
                          "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                          "",
                          "public class Music-download {",
                          "",
                          "    @Inject",
                          "    @Config config",
                          "",
                          "    @Inject",
                          "    @ConfigProperty(name=\"download_url\", ",
                          "                   defaultValue=\"ftp://music.com/us-east/download\")",
                          "    private String downloadUrl;",
                          "",
                          "    public void download() {",
                          "        downloadService(downloadUrl);",
                          "    }",
                          "}"
                    ],
                    "readonly": true,
                    "save": false
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "META-INF/microprofile-config.properties",
                    "preload": [
                        "download_url=ftp://music.com/us-south/download"
                    ],
                    "readonly": true,
                    "save": false
                  },
                  {
                    "displayType":"fileEditor",
                    "fileName": "server.env",
                    "preload": [
                      "WLP_SKIP_MAXPERMSIZE=true",
                      ""
                    ],
                    "readonly": [
                      {
                        "from": "1",
                        "to": "1"
                      }
                    ],
                    "save": false,
                    "callback": "(function test(editor) {microprofileConfigCallBack.listenToEditorForServerEnv(editor); })"
                  }
                ]
              },
              {
                "displayType":"webBrowser",
                "url": "https://music.com/play",
                "browserContent": "/guides/iguide-microprofile-config/html/interactive-guides/microprofile-config/download-from-properties-file.html",
                "callback": "(function test(webBrowser) {microprofileConfigCallBack.listenToBrowserForServerEnvConfig(webBrowser); })"
              }
            ]
        },
        {
            "name": "ConfigureAsSysProp",
            "title": "Configuring as a system property",
            "TOCIndent": 1,
            "description": [
                "temp"
            ]
        },
        {
            "name": "UpdateOrdinal",
            "title": "Changing the ordinal of a ConfigSource",
            "TOCIndent": 1,
            "description": [
                "temp"
            ]
        },
        {
            "name": "DefaultPlayground",
            "title": "Default ConfigSources playground",
            "TOCIndent": 1,
            "description": [
                "temp"
            ],
            "content": [
                {
                    "displayType": "tabbedEditor",
                    "editorList": [
                        {
                            "displayType": "fileEditor",
                            "fileName": "Injection",
                            "preload": [
                                "package com.music.download;",
                                "import javax.inject.Inject;",
                                "import org.eclipse.microprofile.config.Config;",
                                "import org.eclipse.microprofile.config.inject.ConfigProperty;",
                                "",
                                "public class MusicDownload {",
                                "",
                                "    @Inject",
                                "    private Config config;",
                                "",
                                "    @Inject @ConfigProperty(name=\"download_url\", defaultValue=\"ftp://music.com/us-east/download\");",
                                "    private String downloadUrl;",
                                "",
                                "}"
                            ],
                            "readonly": [
                                {
                                    "from": "1",
                                    "to": "5"
                                }
                            ],
                            "callback": "(function test(editor) {playground.getInjectionProperties();})"
                        },
                        {
                            "displayType": "fileEditor",
                            "fileName": "Properties",
                            "preload": [
                                "download_url=ftp://music.com/us-south/download"
                            ],
                            "callback": "(function test(editor) {playground.getPropertiesFileProperties();})"
                        },
                        {
                            "displayType": "fileEditor",
                            "fileName": "Environment Property",
                            "preload": [

                            ],
                            "callback": "(function test(editor) {playground.getEnvironmentProperties();})"
                        },
                        {
                            "displayType": "fileEditor",
                            "fileName": "System Property",
                            "preload": [
                                "WLP_SKIP_MAXPERMSIZE=true",
                                "download_url=ftp://music.com/asia/download"
                            ],
                            "callback": "(function test(editor) {playground.getSystemProperties();})"
                        }
                    ]
                }
            ]
        },
        {
            "name": "WhatNext",
            "title": "Great work!  You're done!",
            "description": ["You learned how ......",
                            "<p> <a >Download the sample MicroProfile Config application on github</a>.</p>"
                           ]
        }

    ]
}
